from selenium import webdriver
from selenium.webdriver.common.by import By
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import time
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import os
import csv
import datetime
import random

url = "https://suchen.mobile.de/fahrzeuge/search.html?dam=false&fr=2014%3A&isSearchRequest=true&ml=%3A120000&ms=20100%3B%3B40%3B&od=up&ref=srpHead&refId=764a9765-1ecc-4b96-01e9-e9a5074b5dbe&s=Car&sb=p&vc=Car"
list1 = [139552.0, 59450.0, 59900.0, 61990.0, 126900.0, 150800.0, 83980.0, 61990.0, 65999.0, 69999.0, 70950.0, 70991.0, 70999.0, 71043.0, 71500.0, 71800.0, 73489.0, 73489.0, 73991.0, 73999.0, 73999.0, 74499.0, 74500.0, 74900.0, 74900.0, 74900.0, 74911.0, 74990.0, 75000.0, 75000.0, 75999.0, 76600.0, 76911.0, 77500.0, 77577.0, 77777.0, 77900.0, 77900.0, 77900.0, 78000.0, 78991.0, 78999.0, 79500.0, 79500.0, 79600.0, 79900.0, 79900.0, 79900.0, 79900.0, 79911.0, 79950.0, 79991.0, 79991.0, 81900.0, 81900.0, 81911.0, 81990.0, 81991.0, 82053.0, 82110.0, 82900.0, 83000.0, 83000.0, 83300.0, 83900.0, 83980.0, 83980.0, 83991.0, 83999.0, 84200.0, 84500.0, 84500.0, 84500.0, 84890.0, 84900.0, 84900.0, 84900.0, 84900.0, 84900.0, 84911.0, 84911.0, 84950.0, 84990.0, 84991.0, 84999.0, 85000.0, 85900.0, 85990.0, 86200.0, 86900.0, 86990.0, 87700.0, 87900.0, 87900.0, 87990.0, 88000.0, 88800.0, 88850.0, 88899.0, 88900.0, 88900.0, 88999.0, 89250.0, 89449.0, 89450.0, 89500.0, 89500.0, 89500.0, 89500.0, 89800.0, 89880.0, 89890.0, 89890.0, 89900.0, 89900.0, 89900.0, 89900.0, 89900.0, 89900.0, 89911.0, 89911.0, 89950.0, 89980.0, 89980.0, 89989.0, 89990.0, 89990.0, 89990.0, 89990.0, 89990.0, 89991.0, 89991.0, 89991.0, 89995.0, 89995.0, 89999.0, 90000.0, 90915.0, 90980.0, 91000.0, 91000.0, 91100.0, 91500.0, 91800.0, 91800.0, 91900.0, 91911.0, 91990.0, 91991.0, 91991.0, 92000.0, 92222.0, 92499.0, 92500.0, 92690.0, 92790.0, 92880.0, 92900.0, 92900.0, 92900.0, 92900.0, 92900.0, 92980.0, 92990.0, 92999.0, 92999.0, 93000.0, 93200.0, 93500.0, 93500.0, 93750.0, 93790.0, 93800.0, 93890.0, 93900.0, 93900.0, 93900.0, 93911.0, 93940.0, 93990.0, 93991.0, 93999.0, 93999.0, 94000.0, 94444.0, 94491.0, 94500.0, 94500.0, 94500.0, 94800.0, 94800.0, 94800.0, 94888.0, 94890.0, 94900.0, 94900.0, 94900.0, 94900.0, 94900.0, 94900.0, 94900.0, 94900.0, 94911.0, 94936.0, 94990.0, 94990.0, 94991.0, 94991.0, 94991.0, 94991.0, 94999.0, 94999.0, 94999.0, 95000.0, 95000.0, 95000.0, 95000.0, 95000.0, 95000.0, 95000.0, 95000.0, 95450.0, 95800.0, 95950.0, 95990.0, 95991.0, 95999.0, 96152.0, 96500.0, 96500.0, 96790.0, 96900.0, 96900.0, 96900.0, 96900.0, 96900.0, 96911.0, 96911.0, 96989.0, 96990.0, 96990.0, 96991.0, 97000.0, 97100.0, 97500.0, 97500.0, 97500.0, 97500.0, 97500.0, 97500.0, 97500.0, 97580.0, 97850.0, 97900.0, 97900.0, 97900.0, 97911.0, 97942.0, 97980.0, 97980.0, 97990.0, 97991.0, 97991.0, 97999.0, 98000.0, 98000.0, 98000.0, 98000.0, 98400.0, 98500.0, 98500.0, 98500.0, 98700.0, 98800.0, 98890.0, 98890.0, 98890.0, 98900.0, 98900.0, 98911.0, 98911.0, 98911.0, 98950.0, 98991.0, 98999.0, 99000.0, 99000.0, 99000.0, 99033.0, 99033.0, 99033.0, 99500.0, 99500.0, 99500.0, 99500.0, 99500.0, 99690.0, 99700.0, 99830.0, 99890.0, 99900.0, 99900.0, 99900.0, 99900.0, 99900.0, 99900.0, 99900.0, 99900.0, 99900.0, 99900.0, 99900.0, 99950.0, 99950.0, 99990.0, 99990.0, 99990.0, 99990.0, 99991.0, 99991.0, 99991.0, 99991.0, 99991.0, 99999.0, 99999.0, 100000.0, 100000.0, 100500.0, 100579.0, 100990.0, 100990.0, 100991.0, 101000.0, 101125.0, 101400.0, 101787.0, 101900.0, 101900.0, 101911.0, 101980.0, 101980.0, 101991.0, 101991.0, 101991.0, 102500.0, 102500.0, 102525.0, 102880.0, 102888.0, 102900.0, 102900.0, 102900.0, 102900.0, 102900.0, 102900.0, 102900.0, 102911.0, 102991.0, 102991.0, 102991.0, 102991.0, 102995.0, 103000.0, 103000.0, 103000.0, 103790.0, 103825.0, 103900.0, 103900.0, 103900.0, 103900.0, 103900.0, 103911.0, 103980.0, 103991.0, 103991.0, 103991.0, 103995.0, 104000.0, 104500.0, 104500.0, 104500.0, 104685.0, 104685.0, 104800.0, 104830.0, 104850.0, 104880.0, 104890.0, 104890.0, 104900.0, 104900.0, 104900.0, 104900.0, 104900.0, 104900.0, 104900.0, 104900.0, 104900.0, 104900.0, 104911.0, 104950.0, 104950.0, 104980.0, 104980.0, 104980.0, 104991.0, 104991.0, 104991.0, 104991.0, 104991.0, 104991.0, 105000.0, 105000.0, 105000.0, 105000.0, 105000.0, 105000.0, 105000.0, 105000.0, 105200.0, 105422.0, 105600.0, 105780.0, 105900.0, 105900.0, 105900.0, 105900.0, 105900.0, 105900.0, 105911.0, 105950.0, 105990.0, 105991.0, 105991.0, 105999.0, 106500.0, 106790.0, 106890.0, 106900.0, 106900.0, 106911.0, 107000.0, 107500.0, 107880.0, 107890.0, 107900.0, 107900.0, 107900.0, 107900.0, 107900.0, 107900.0, 107990.0, 107990.0, 107991.0, 107991.0, 107991.0, 107991.0, 107998.0, 107999.0, 107999.0, 107999.0, 108000.0, 108000.0, 108000.0, 108500.0, 108500.0, 108750.0, 108750.0, 108750.0, 108800.0, 108800.0, 108870.0, 108880.0, 108900.0, 108900.0, 108900.0, 108900.0, 108900.0, 108950.0, 108980.0, 108980.0, 108991.0, 108999.0, 109000.0, 109000.0, 109000.0, 109000.0, 109000.0, 109000.0, 109000.0, 109400.0, 109480.0, 109490.0, 109700.0, 109850.0, 109850.0, 109880.0, 109890.0, 109890.0, 109890.0, 109890.0, 109899.0, 109900.0, 109900.0, 109900.0, 109900.0, 109900.0, 109900.0, 109900.0, 109900.0, 109900.0, 109900.0, 109900.0, 109900.0, 109900.0, 109900.0, 109900.0, 109911.0, 109911.0, 109911.0, 109911.0, 109911.0, 109950.0, 109950.0, 109950.0, 109990.0, 109990.0, 109990.0, 109990.0, 109990.0, 109990.0, 109991.0, 109991.0, 109991.0, 109991.0, 109991.0, 109991.0, 109991.0, 109991.0, 109991.0, 109999.0, 109999.0, 109999.0, 109999.0, 109999.0, 110000.0, 110000.0, 110000.0, 110000.0, 110000.0, 110000.0, 110670.0, 110900.0, 110989.0, 110989.0, 111000.0, 111000.0, 111000.0, 111000.0, 111111.0, 111400.0, 111490.0, 111490.0, 111600.0, 111800.0, 111860.0, 111880.0, 111880.0, 111880.0, 111880.0, 111900.0, 111900.0, 111900.0, 111911.0, 111992.0, 111992.0, 112480.0, 112500.0, 112500.0, 112500.0, 112500.0, 112790.0, 112800.0, 112800.0, 112850.0, 112900.0, 112900.0, 112900.0, 112900.0, 112900.0, 112900.0, 112911.0, 112980.0, 112980.0, 112990.0, 112990.0, 112990.0, 112991.0, 112991.0, 112991.0, 112991.0, 112999.0, 112999.0, 112999.0, 112999.0, 113000.0, 113000.0, 113049.0, 113399.0, 113400.0, 113450.0, 113480.0, 113500.0, 113500.0, 113500.0, 113750.0, 113800.0, 113800.0, 113800.0, 113800.0, 113899.0, 113900.0, 113900.0, 113900.0, 113911.0, 113911.0, 113990.0, 113990.0, 114000.0, 114000.0, 114000.0, 114208.0, 114229.0, 114350.0, 114500.0, 114500.0, 114699.0, 114699.0, 114790.0, 114800.0, 114800.0, 114800.0, 114800.0, 114800.0, 114850.0, 114850.0, 114850.0, 114890.0, 114890.0, 114900.0, 114900.0, 114900.0, 114900.0, 114900.0, 114900.0, 114900.0, 114900.0, 114900.0, 114900.0, 114900.0, 114900.0, 114900.0, 114911.0, 114911.0, 114911.0, 114950.0, 114980.0, 114980.0, 114990.0, 114990.0, 114990.0, 114990.0, 114990.0, 114991.0, 114992.0, 114995.0, 114999.0, 114999.0, 114999.0, 114999.0, 114999.0, 114999.0, 115000.0, 115000.0, 115000.0, 115000.0, 115000.0, 115000.0, 115000.0, 115000.0, 115006.0, 115066.0, 115450.0, 115500.0, 115500.0, 115500.0, 115500.0, 115880.0, 115890.0, 115900.0, 115900.0, 115900.0, 115900.0, 115900.0, 115900.0, 115900.0, 115900.0, 115900.0, 115911.0, 115980.0, 115990.0, 115990.0, 115991.0, 115991.0, 115992.0, 115997.0, 115999.0, 116000.0, 116000.0, 116500.0, 116500.0, 116500.0, 116600.0, 116603.0, 116700.0, 116790.0, 116820.0, 116890.0, 116890.0, 116890.0, 116900.0, 116900.0, 116900.0, 116900.0, 116900.0, 116900.0, 116900.0, 116900.0, 116911.0, 116950.0, 116950.0, 116980.0, 116990.0, 116990.0, 116990.0, 116991.0, 116992.0, 117000.0, 117000.0, 117000.0, 117400.0, 117500.0, 117500.0, 117500.0, 117590.0, 117599.0, 117700.0, 117770.0, 117800.0, 117810.0, 117880.0, 117890.0, 117890.0, 117890.0, 117900.0, 117900.0, 117900.0, 117900.0, 117900.0, 117900.0, 117900.0, 117911.0, 117911.0, 117990.0, 117990.0, 117992.0, 117999.0, 117999.0, 117999.0, 117999.0, 118000.0, 118000.0, 118000.0, 118000.0, 118200.0, 118250.0, 118288.0, 118499.0, 118500.0, 118500.0, 118500.0, 118500.0, 118555.0, 118700.0, 118750.0, 118800.0, 118850.0, 118850.0, 118850.0, 118890.0, 118890.0, 118890.0, 118900.0, 118900.0, 118900.0, 118900.0, 118900.0, 118900.0, 118900.0, 118900.0, 118941.0, 118950.0, 118990.0, 118990.0, 118990.0, 118991.0, 119000.0, 119000.0, 119000.0, 119000.0, 119000.0, 119000.0, 119000.0, 119000.0, 119000.0, 119000.0, 119000.0, 119000.0, 119000.0, 119000.0, 119000.0, 119004.0, 119275.0, 119420.0, 119490.0, 119495.0, 119500.0, 119500.0, 119500.0, 119500.0, 119500.0, 119500.0, 119500.0, 119700.0, 119700.0, 119777.0, 119790.0, 119800.0, 119800.0, 119800.0, 119850.0, 119870.0, 119880.0, 119880.0, 119888.0, 119890.0, 119890.0, 119890.0, 119890.0, 119890.0, 119895.0, 119895.0, 119899.0, 119899.0, 119899.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119900.0, 119911.0, 119911.0, 119911.0, 119911.0, 119911.0, 119911.0, 119911.0, 119911.0, 119911.0, 119911.0, 119911.0, 119950.0, 119950.0, 119950.0, 119950.0, 119950.0, 119990.0, 119990.0, 119990.0, 119990.0, 119990.0, 119991.0, 119991.0, 119991.0, 119991.0, 119991.0, 119992.0, 119992.0, 119992.0, 119992.0, 119992.0, 119992.0, 119992.0, 119992.0, 119992.0, 119992.0, 119995.0, 119995.0, 119995.0, 119997.0, 119999.0, 119999.0, 119999.0, 119999.0, 119999.0, 119999.0, 119999.0, 119999.0, 120000.0, 120000.0, 120000.0, 120190.0, 120390.0, 120400.0, 120600.0, 120888.0, 120940.0, 120990.0, 120992.0, 121370.0, 121470.0, 121499.0, 121500.0, 121900.0, 121900.0, 121900.0, 121900.0, 121900.0, 121900.0, 121900.0, 121900.0, 121911.0, 121911.0, 121990.0, 121991.0, 121992.0, 121992.0, 121992.0, 121999.0, 122000.0, 122000.0, 122000.0, 122194.0, 122450.0, 122490.0, 122591.0, 122600.0, 122800.0, 122820.0, 122850.0, 122850.0, 122880.0, 122880.0, 122890.0, 122899.0, 122900.0, 122900.0, 122900.0, 122900.0, 122900.0, 122900.0, 122900.0, 122911.0, 122911.0, 122911.0, 122950.0, 122980.0, 122980.0, 122991.0, 122992.0, 122992.0, 122999.0]

def dataLoader():
    counter = 0
    optionsEinstellungen = webdriver.ChromeOptions()
    optionsEinstellungen.add_argument("--disable-search-engine-choice-screen")
    # optionsEinstellungen.add_argument("--icognito")
    driver = webdriver.Chrome(options=optionsEinstellungen)
    driver.get(url)
    time.sleep(5)
    wait = WebDriverWait(driver,10)
    cookieAccepted = wait.until(EC.element_to_be_clickable((By.CLASS_NAME, "mde-consent-accept-btn")))
    cookieAccepted.click()

    pricesOfCars = wait.until(EC.presence_of_all_elements_located((By.XPATH, "//span[@data-testid='price-label']")))
    pricesCollected = []
    while True:
        # if counter == 2:
        #     break
        # Alle Preise der Autos auf der aktuellen Seite extrahieren
        price_elements = wait.until(
            EC.presence_of_all_elements_located((By.XPATH, "//span[@data-testid='price-label']")))

        for price in price_elements:
            price_text = price.text
            try:
                # Den Preis bereinigen und als float speichern
                cleaned_price = float(price_text.replace("€", "").replace(".", "").replace(",", ".").strip())
                pricesCollected.append(cleaned_price)
            except ValueError:
                print(f"Fehler bei der Preisbereinigung: {price_text}")

        # Ausgabe der auf der aktuellen Seite gefundenen Preise
        print("Gefundene Preise auf dieser Seite: ", pricesCollected)
        # counter = counter+1

        # Überprüfen, ob der "Weitere Angebote" Button vorhanden ist
        try:
            next_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@data-testid='pagination:next']")))
            next_button.click()
            time.sleep(3)  # Warten, bis die nächste Seite geladen ist
        except:
            # Wenn kein "Weitere Angebote" Button gefunden wird, ist die letzte Seite erreicht
            print("Keine weiteren Seiten vorhanden. Beende das Skript.")
            break

        # Gesamtausgabe aller gesammelten Preise
    print("Alle gesammelten Preise: ", pricesCollected)

    # Browser schließen
    driver.quit()
    print("Kurz vorm Beenden der Session")
    time.sleep(4)
    driver.quit()
    return pricesCollected


def savePricesToCSV(year, quarter, minPrice, maxPrice, medianPrice, stdDeviationPrice, filename="911erPriceStatistics.csv"):
    # Erstelle die CSV-Datei oder öffne sie, falls sie existiert
    file_exists = os.path.isfile(filename)

    with open(filename, mode='a', newline='') as file:
        writer = csv.writer(file)

        # Schreibe die Kopfzeile nur, wenn die Datei neu ist
        if not file_exists:
            writer.writerow(["Year", "Quarter", "Min Price", "Max Price", "Median Price", "Standard Deviation"])

        # Schreibe die Daten
        writer.writerow([year, quarter, minPrice, maxPrice, medianPrice, stdDeviationPrice])

    print(f"Die Preisstatistiken wurden in {filename} gespeichert.")


def pricesEvaluation(priceList):
    print("Hier werden die einzelnen Preise ausgewertet!")
    # Preise Min/ Max/ Durchschnitt/ Median/ Std
    # Boxplot generieren lassen mit den Daten
    # Das Ganze nach Quartal und Jahr angeben lassen
    maxPrice = np.max(priceList)
    minPrice = np.min(priceList)
    medianPrice = np.median(priceList)
    stdDeviationPrice = round(np.std(priceList),2)
    print(f"Maximaler Preis: {maxPrice}")
    print(f"Minimaler Preis: {minPrice}")
    print(f"Median Preis: {medianPrice}")
    print(f"Standardabweichung: {stdDeviationPrice}")
    currentYear = datetime.datetime.now().year
    currentQuarter = (datetime.datetime.now().month - 1)//3 +1
    savePricesToCSV(currentYear, currentQuarter, minPrice, maxPrice, medianPrice, stdDeviationPrice)


# def plotPriceDistribution(priceList):
#     plt.figure(figsize=(10, 6))
#     plt.boxplot(priceList, patch_artist=True)
#     plt.title('Preisspanne des Porsche 911')
#     plt.ylabel('Preis in €')
#     plt.grid(True)
#     plt.show()

def plotPriceDistribution(csv_file):
    # 1. CSV-Datei einlesen
    df = pd.read_csv(csv_file)

    # 2. Kombinierte Spalte "Year-Quarter" erstellen
    df['Year-Quarter'] = df['Year'].astype(str) + " Q" + df['Quarter'].astype(str)

    # 3. Werte für den Boxplot vorbereiten
    # Da der Boxplot Min, Max, und Median benötigt, erstelle ein Dictionary:
    boxplot_data = []
    labels = []

    for _, row in df.iterrows():
        # Simuliere die Preisspanne pro Quartal und Jahr
        min_price = row['Min Price']
        max_price = row['Max Price']
        median_price = row['Median Price']
        std_dev = row['Standard Deviation']

        # Boxplot-Daten erstellen (Preisverteilung simulieren)
        boxplot_data.append([min_price, median_price, max_price])
        labels.append(row['Year-Quarter'])

    # 4. Boxplot erstellen
    plt.figure(figsize=(12, 6))
    plt.boxplot(boxplot_data, patch_artist=True, labels=labels)
    plt.title('Preisspanne des Porsche 911 über die Zeit')
    plt.xlabel('Quartal und Jahr')
    plt.ylabel('Preis in €')
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.tight_layout()

    # 5. Plot anzeigen
    plt.show()


if __name__ == '__main__':
    pirceListCollected = dataLoader()
    print("Jetzt statistics")
    pricesEvaluation(pirceListCollected)
    time.sleep(5)
    plotPriceDistribution('911erPriceStatistics.csv')